var events = require('events');
var util = require('util');
var SerialPort = require('serialport');
var MessageParser = require('./parser');

var Cubelet = function(device) {
	events.EventEmitter.call(this);

	this.device = device;
	
	var connection = new SerialPort(device);
	var parser = new MessageParser();
	var cubelet = this;

	connection.on('open', function() {
		console.log('Connected.');

		// Emit connect message
		cubelet.emit('connect');

		// Emit received messages
		parser.on('message', function(message) {
			cubelet.emit('message', message);
		});
	});

	connection.on('error', function(e) {
		console.error(e);
		cubelet.emit('error', e);
	});

	connection.on('close', function() {
		console.log('Disconnected.');

		// Emit disconnect message
		cubelet.emit('disconnect');

		// Remove event listeners
		parser.removeAllEventListeners('message');
	});

	this.postCommand = function(command) {
		connection.write(command.encode());
	};
};

util.inherits(Cubelet, events.EventEmitter);
module.exports = Cubelet;

module.exports.list = function(callback) {
	SerialPort.list(function(error, devices) {
		if (error) {
			callback(error, devices);
			return;
		}
		var cubelets = [];
		devices.forEach(function(device) {
			if (device.comName && device.comName.indexOf('Cubelet') != -1) {
				cubelets.push(device);
			}
		});
		callback(null, cubelets);
	});
};